name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t my-static-website .
          docker save my-static-website | gzip > my-static-website.tar.gz
        id: docker_build

      - name: List files in the workspace after build
        run: ls -la

      - name: Check if artifact file exists
        run: test -f my-static-website.tar.gz && echo "Artifact exists" || echo "Artifact not found"

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: my-static-website.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: List files in the workspace after download
        run: ls -la

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqy unzip python3-pip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          pip3 install ansible boto boto3

      - name: Setup AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize Terraform
        run: terraform -chdir=terraform init

      - name: Apply Terraform configuration
        run: terraform -chdir=terraform apply -auto-approve

      - name: Get instance IP
        id: terraform
        run: |
          echo "instance_ip=$(terraform -chdir=terraform output -raw instance_ip)" >> $GITHUB_ENV
          echo "Instance IP: ${{ env.instance_ip }}"

      - name: Verify Terraform Output
        run: |
          echo "Terraform output instance_ip: ${{ env.instance_ip }}"

      - name: Retry SSH connection until instance is ready
        env:
          INSTANCE_IP: ${{ env.instance_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          echo "[web]" > inventory
          echo "${{ env.instance_ip }}" >> inventory
          for i in {1..10}; do
            echo "Attempt $i: Trying to SSH into $INSTANCE_IP"
            ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.instance_ip }} echo 'SSH connection established' && break
            echo "Retrying SSH connection in 30 seconds..."
            sleep 30
          done

      - name: Transfer Docker image
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa my-static-website.tar.gz ec2-user@${{ env.instance_ip }}:/home/ec2-user/

      - name: Configure AWS instance with Ansible
        env:
          INSTANCE_IP: ${{ env.instance_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ansible-playbook -i inventory --private-key ~/.ssh/id_rsa -e "ansible_ssh_user=ec2-user ansible_ssh_extra_args='-o StrictHostKeyChecking=no'" ansible/playbook.yml